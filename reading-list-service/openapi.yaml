openapi: 3.0.3
info:
  title: Choreo Sample - Book List - Nodejs REST API Service
  description: >-
    This is a sample API specification for a simple reading list application with in-memory cache
    written in Nodejs
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Choreo
  url: https://choreo.dev
servers:
  - url: http://localhost:8080
tags:
  - name: books
    description: In-memory book list cache API
paths:
  /movies:
    get:
      operationId: getMovies
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /locationTimes:
    get:
      operationId: getLocationtimes
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationTime'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /show/{movieId}/{dateSelected}/{locationId}/{timeId}:
    get:
      operationId: getShowMovieidDateselectedLocationidTimeid
      parameters:
      - name: movieId
        in: path
        required: true
        schema:
          type: string
      - name: dateSelected
        in: path
        required: true
        schema:
          type: string
      - name: locationId
        in: path
        required: true
        schema:
          type: string
      - name: timeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Show'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /users:
    post:
      operationId: postUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
components:
  schemas:
    Movie:
      required:
      - description_text
      - end_date
      - id
      - image
      - movie_name
      - start_date
      type: object
      properties:
        id:
          type: string
        movie_name:
          type: string
        description_text:
          type: string
        image:
          type: string
        start_date:
          type: string
        end_date:
          type: string
    ErrorPayload:
      type: object
      properties:
        reason:
          type: string
          description: Reason phrase
        path:
          type: string
          description: Request path
        method:
          type: string
          description: Method type of the request
        message:
          type: string
          description: Error message
        timestamp:
          type: string
          description: Timestamp of the error
        status:
          type: integer
          description: Relevant HTTP status code
          format: int32
    LocationTime:
      required:
      - address
      - loc_name
      - location_id
      - seats
      - time_id
      - times
      type: object
      properties:
        location_id:
          type: string
        time_id:
          type: string
        times:
          type: string
        loc_name:
          type: string
        address:
          type: string
        seats:
          type: string
    User:
      required:
      - email
      - id
      - user_name
      - user_type
      type: object
      properties:
        email:
          type: string
        user_type:
          type: string
        id:
          type: string
        user_name:
          type: string
    Show:
      required:
      - date_selected
      - id
      - location_id
      - movie_id
      - seats_left
      - time_id
      type: object
      properties:
        id:
          type: string
        movie_id:
          type: string
        date_selected:
          type: string
        time_id:
          type: string
        seats_left:
          type: string
        location_id:
          type: string
